// Copyright Materialize, Inc. and contributors. All rights reserved.
//
// Use of this software is governed by the Business Source License
// included in the LICENSE file.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0.

// BEGIN LINT CONFIG
// DO NOT EDIT. Automatically generated by bin/gen-lints.
// Have complaints about the noise? See the note in misc/python/materialize/cli/gen-lints.py first.
#![allow(clippy::style)]
#![allow(clippy::complexity)]
#![allow(clippy::large_enum_variant)]
#![allow(clippy::mutable_key_type)]
#![allow(clippy::stable_sort_primitive)]
#![allow(clippy::map_entry)]
#![allow(clippy::box_default)]
#![warn(clippy::bool_comparison)]
#![warn(clippy::clone_on_ref_ptr)]
#![warn(clippy::no_effect)]
#![warn(clippy::unnecessary_unwrap)]
#![warn(clippy::dbg_macro)]
#![warn(clippy::todo)]
#![warn(clippy::wildcard_dependencies)]
#![warn(clippy::zero_prefixed_literal)]
#![warn(clippy::borrowed_box)]
#![warn(clippy::deref_addrof)]
#![warn(clippy::double_must_use)]
#![warn(clippy::double_parens)]
#![warn(clippy::extra_unused_lifetimes)]
#![warn(clippy::needless_borrow)]
#![warn(clippy::needless_question_mark)]
#![warn(clippy::needless_return)]
#![warn(clippy::redundant_pattern)]
#![warn(clippy::redundant_slicing)]
#![warn(clippy::redundant_static_lifetimes)]
#![warn(clippy::single_component_path_imports)]
#![warn(clippy::unnecessary_cast)]
#![warn(clippy::useless_asref)]
#![warn(clippy::useless_conversion)]
#![warn(clippy::builtin_type_shadow)]
#![warn(clippy::duplicate_underscore_argument)]
#![warn(clippy::double_neg)]
#![warn(clippy::unnecessary_mut_passed)]
#![warn(clippy::wildcard_in_or_patterns)]
#![warn(clippy::collapsible_if)]
#![warn(clippy::collapsible_else_if)]
#![warn(clippy::crosspointer_transmute)]
#![warn(clippy::excessive_precision)]
#![warn(clippy::overflow_check_conditional)]
#![warn(clippy::as_conversions)]
#![warn(clippy::match_overlapping_arm)]
#![warn(clippy::zero_divided_by_zero)]
#![warn(clippy::must_use_unit)]
#![warn(clippy::suspicious_assignment_formatting)]
#![warn(clippy::suspicious_else_formatting)]
#![warn(clippy::suspicious_unary_op_formatting)]
#![warn(clippy::mut_mutex_lock)]
#![warn(clippy::print_literal)]
#![warn(clippy::same_item_push)]
#![warn(clippy::useless_format)]
#![warn(clippy::write_literal)]
#![warn(clippy::redundant_closure)]
#![warn(clippy::redundant_closure_call)]
#![warn(clippy::unnecessary_lazy_evaluations)]
#![warn(clippy::partialeq_ne_impl)]
#![warn(clippy::redundant_field_names)]
#![warn(clippy::transmutes_expressible_as_ptr_casts)]
#![warn(clippy::unused_async)]
#![warn(clippy::disallowed_methods)]
#![warn(clippy::disallowed_macros)]
#![warn(clippy::disallowed_types)]
#![warn(clippy::from_over_into)]
// END LINT CONFIG

use reqwest::Method;
use serde::{Deserialize, Serialize};

use super::{cloud_provider::CloudProvider, errors::CloudApiError, region::Region, Client};

#[derive(Debug, Deserialize, Clone)]
#[serde(rename_all = "camelCase")]
pub struct Environment {
    pub environmentd_pgwire_address: String,
    pub environmentd_https_address: String,
    pub resolvable: bool,
}

impl Client {
    /// Get an environment in a partciular region for the current user.
    pub async fn get_environment(&self, region: Region) -> Result<Environment, CloudApiError> {
        // Build subdomain:
        let subdomain = region.ec_subdomain();

        // Send request to the subdomain
        let req = self
            .build_request(Method::GET, ["api", "environment"], &subdomain)
            .await?;

        let environments: Vec<Environment> = self.send_request(req).await?;
        Ok(environments.get(0).unwrap().to_owned())
    }

    /// Get all the available environments for the current user.
    pub async fn get_all_environments(&self) -> Result<Vec<Environment>, CloudApiError> {
        let cloud_providers: Vec<CloudProvider> = self.list_cloud_providers().await?;
        let mut environments: Vec<Environment> = vec![];

        for cloud_provider in cloud_providers {
            let region = self.get_region(cloud_provider).await?;
            let environment = self.get_environment(region).await?;
            environments.push(environment);
        }

        Ok(environments)
    }

    /// Creates an environment in a particular region for the current user
    pub async fn create_environment(
        &self,
        version: Option<String>,
        environmentd_extra_args: Vec<String>,
        region: Region,
    ) -> Result<Region, CloudApiError> {
        #[derive(Serialize)]
        #[serde(rename_all = "camelCase")]
        struct Body {
            #[serde(skip_serializing_if = "Option::is_none")]
            environmentd_image_ref: Option<String>,
            #[serde(skip_serializing_if = "Vec::is_empty")]
            environmentd_extra_args: Vec<String>,
        }

        let body = Body {
            environmentd_image_ref: version.map(|v| match v.split_once(':') {
                None => format!("materialize/environmentd:{v}"),
                Some((user, v)) => format!("{user}/environmentd:{v}"),
            }),
            environmentd_extra_args,
        };

        let subdomain = region.ec_subdomain();
        let req = self
            .build_request(Method::POST, ["api", "environmentassignment"], &subdomain)
            .await?;
        let req = req.json(&body);
        Ok(self.send_request(req).await?)
    }

    pub async fn delete_environment(&self, region: Region) -> Result<Region, CloudApiError> {
        let subdomain = region.ec_subdomain();
        let req = self
            .build_request(Method::DELETE, ["api", "environmentassignment"], &subdomain)
            .await?;
        Ok(self.send_request(req).await?)
    }
}
