// Copyright Materialize, Inc. and contributors. All rights reserved.
//
// Use of this software is governed by the Business Source License
// included in the LICENSE file.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0.

// BEGIN LINT CONFIG
// DO NOT EDIT. Automatically generated by bin/gen-lints.
// Have complaints about the noise? See the note in misc/python/materialize/cli/gen-lints.py first.
#![allow(clippy::style)]
#![allow(clippy::complexity)]
#![allow(clippy::large_enum_variant)]
#![allow(clippy::mutable_key_type)]
#![allow(clippy::stable_sort_primitive)]
#![allow(clippy::map_entry)]
#![allow(clippy::box_default)]
#![warn(clippy::bool_comparison)]
#![warn(clippy::clone_on_ref_ptr)]
#![warn(clippy::no_effect)]
#![warn(clippy::unnecessary_unwrap)]
#![warn(clippy::dbg_macro)]
#![warn(clippy::todo)]
#![warn(clippy::wildcard_dependencies)]
#![warn(clippy::zero_prefixed_literal)]
#![warn(clippy::borrowed_box)]
#![warn(clippy::deref_addrof)]
#![warn(clippy::double_must_use)]
#![warn(clippy::double_parens)]
#![warn(clippy::extra_unused_lifetimes)]
#![warn(clippy::needless_borrow)]
#![warn(clippy::needless_question_mark)]
#![warn(clippy::needless_return)]
#![warn(clippy::redundant_pattern)]
#![warn(clippy::redundant_slicing)]
#![warn(clippy::redundant_static_lifetimes)]
#![warn(clippy::single_component_path_imports)]
#![warn(clippy::unnecessary_cast)]
#![warn(clippy::useless_asref)]
#![warn(clippy::useless_conversion)]
#![warn(clippy::builtin_type_shadow)]
#![warn(clippy::duplicate_underscore_argument)]
#![warn(clippy::double_neg)]
#![warn(clippy::unnecessary_mut_passed)]
#![warn(clippy::wildcard_in_or_patterns)]
#![warn(clippy::collapsible_if)]
#![warn(clippy::collapsible_else_if)]
#![warn(clippy::crosspointer_transmute)]
#![warn(clippy::excessive_precision)]
#![warn(clippy::overflow_check_conditional)]
#![warn(clippy::as_conversions)]
#![warn(clippy::match_overlapping_arm)]
#![warn(clippy::zero_divided_by_zero)]
#![warn(clippy::must_use_unit)]
#![warn(clippy::suspicious_assignment_formatting)]
#![warn(clippy::suspicious_else_formatting)]
#![warn(clippy::suspicious_unary_op_formatting)]
#![warn(clippy::mut_mutex_lock)]
#![warn(clippy::print_literal)]
#![warn(clippy::same_item_push)]
#![warn(clippy::useless_format)]
#![warn(clippy::write_literal)]
#![warn(clippy::redundant_closure)]
#![warn(clippy::redundant_closure_call)]
#![warn(clippy::unnecessary_lazy_evaluations)]
#![warn(clippy::partialeq_ne_impl)]
#![warn(clippy::redundant_field_names)]
#![warn(clippy::transmutes_expressible_as_ptr_casts)]
#![warn(clippy::unused_async)]
#![warn(clippy::disallowed_methods)]
#![warn(clippy::disallowed_macros)]
#![warn(clippy::disallowed_types)]
#![warn(clippy::from_over_into)]
// END LINT CONFIG

use std::{str::FromStr, fmt::Display};

use anyhow::bail;
use reqwest::{Error, Method};
use serde::{Deserialize, Serialize};

use super::{region::Region, Client, CloudProvider, errors::{CloudApiError}};

#[derive(Debug, Deserialize, Clone)]
#[serde(rename_all = "camelCase")]
pub struct Environment {
    pub environmentd_pgwire_address: String,
    pub environmentd_https_address: String,
    pub resolvable: bool,
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub enum CloudProviderRegion {
    #[serde(rename = "aws/us-east-1")]
    AwsUsEast1,
    #[serde(rename = "aws/eu-west-1")]
    AwsEuWest1,
}

/// Implementation to name the possible values and parse every option.
impl CloudProviderRegion {
    /// Return the region name inside a cloud provider.
    pub fn region_name(self) -> &'static str {
        match self {
            CloudProviderRegion::AwsUsEast1 => "us-east-1",
            CloudProviderRegion::AwsEuWest1 => "eu-west-1",
        }
    }
}

impl Display for CloudProviderRegion {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            CloudProviderRegion::AwsUsEast1 => write!(f, "aws/us-east-1"),
            CloudProviderRegion::AwsEuWest1 => write!(f, "aws/eu-west-1"),
        }
    }
}

impl FromStr for CloudProviderRegion {
    type Err = CloudApiError;

    fn from_str(s: &str) -> Result<Self> {
        match s.to_lowercase().as_str() {
            "aws/us-east-1" => Ok(CloudProviderRegion::AwsUsEast1),
            "aws/eu-west-1" => Ok(CloudProviderRegion::AwsEuWest1),
            _ => bail!("s"),
        }
    }
}

impl Client {
    pub async fn get_environment(&self, region: &Region) -> Result<Environment, CloudApiError> {
        // TODO: Improve error handling
        let environment_details = self.region_environment_details(region).await?.unwrap();

        let environment = environment_details.get(0);

        match environment {
            Some(_) => Ok(Environment {
                environmentd_pgwire_address: "s".to_string(),
                environmentd_https_address: "s".to_string(),
                resolvable: true,
            }),
            None => CloudApiError::EmptyRegion,
        }
    }

    pub async fn get_provider_by_region_name(
        &self,
        cloud_provider_region: &CloudProviderRegion,
    ) -> Result<CloudProvider, CloudApiError> {
        let cloud_providers = self
            .list_cloud_providers("".parse())
            .await?;

        // Create a vec with only one region
        let cloud_provider: CloudProvider = cloud_providers
            .into_iter()
            .find(|provider| provider.name == cloud_provider_region)
            .unwrap();

        Ok(cloud_provider)
    }

    pub async fn get_provider_region(
        &self,
        cloud_provider_region: &CloudProviderRegion,
    ) -> Result<Region, CloudApiError> {
        let cloud_provider = self
            .get_provider_by_region_name(cloud_provider_region)
            .await?;

        let cloud_provider_region_details = self
            .get_cloud_provider_region_details(&cloud_provider)
            .await?;

        let region = cloud_provider_region_details.get(0).unwrap();

        Ok(region.to_owned())
    }

    pub async fn get_region_environment(&self, region: &Region) -> Result<Environment, Error> {
        let environment_details = self.region_environment_details(region).await?.unwrap();
        let environment = environment_details.get(0).unwrap();

        Ok(environment.to_owned())
    }

    pub async fn get_all_environments(
        &self,
        cloud_provider_region: &CloudProviderRegion,
    ) -> Result<Environment, CloudApiError> {
        let region = self
            .get_provider_region(cloud_provider_region)
            .await
            .unwrap();

        let environment = self.get_region_environment(&region).await.unwrap();

        Ok(environment)
    }

    pub async fn create_environment(
        &self,
        version: Option<String>,
        environmentd_extra_args: Vec<String>,
    ) -> Result<Region, Error> {
        #[derive(Serialize)]
        #[serde(rename_all = "camelCase")]
        struct Body {
            #[serde(skip_serializing_if = "Option::is_none")]
            environmentd_image_ref: Option<String>,
            #[serde(skip_serializing_if = "Vec::is_empty")]
            environmentd_extra_args: Vec<String>,
        }

        let body = Body {
            environmentd_image_ref: version.map(|v| match v.split_once(':') {
                None => format!("materialize/environmentd:{v}"),
                Some((user, v)) => format!("{user}/environmentd:{v}"),
            }),
            environmentd_extra_args,
        };

        let request = self.build_request(Method::POST, ["api", "environmentassignment"]);
        let token = self.frontegg_client.auth().await.unwrap().token;
        let request = request
            .bearer_auth(token)
            .json(&body)
            .send()
            .await?
            .json::<Region>()
            .await;
        request
    }
}
