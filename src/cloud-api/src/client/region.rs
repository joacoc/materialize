// Copyright Materialize, Inc. and contributors. All rights reserved.
//
// Use of this software is governed by the Business Source License
// included in the LICENSE file.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0.

// BEGIN LINT CONFIG
// DO NOT EDIT. Automatically generated by bin/gen-lints.
// Have complaints about the noise? See the note in misc/python/materialize/cli/gen-lints.py first.
#![allow(clippy::style)]
#![allow(clippy::complexity)]
#![allow(clippy::large_enum_variant)]
#![allow(clippy::mutable_key_type)]
#![allow(clippy::stable_sort_primitive)]
#![allow(clippy::map_entry)]
#![allow(clippy::box_default)]
#![warn(clippy::bool_comparison)]
#![warn(clippy::clone_on_ref_ptr)]
#![warn(clippy::no_effect)]
#![warn(clippy::unnecessary_unwrap)]
#![warn(clippy::dbg_macro)]
#![warn(clippy::todo)]
#![warn(clippy::wildcard_dependencies)]
#![warn(clippy::zero_prefixed_literal)]
#![warn(clippy::borrowed_box)]
#![warn(clippy::deref_addrof)]
#![warn(clippy::double_must_use)]
#![warn(clippy::double_parens)]
#![warn(clippy::extra_unused_lifetimes)]
#![warn(clippy::needless_borrow)]
#![warn(clippy::needless_question_mark)]
#![warn(clippy::needless_return)]
#![warn(clippy::redundant_pattern)]
#![warn(clippy::redundant_slicing)]
#![warn(clippy::redundant_static_lifetimes)]
#![warn(clippy::single_component_path_imports)]
#![warn(clippy::unnecessary_cast)]
#![warn(clippy::useless_asref)]
#![warn(clippy::useless_conversion)]
#![warn(clippy::builtin_type_shadow)]
#![warn(clippy::duplicate_underscore_argument)]
#![warn(clippy::double_neg)]
#![warn(clippy::unnecessary_mut_passed)]
#![warn(clippy::wildcard_in_or_patterns)]
#![warn(clippy::collapsible_if)]
#![warn(clippy::collapsible_else_if)]
#![warn(clippy::crosspointer_transmute)]
#![warn(clippy::excessive_precision)]
#![warn(clippy::overflow_check_conditional)]
#![warn(clippy::as_conversions)]
#![warn(clippy::match_overlapping_arm)]
#![warn(clippy::zero_divided_by_zero)]
#![warn(clippy::must_use_unit)]
#![warn(clippy::suspicious_assignment_formatting)]
#![warn(clippy::suspicious_else_formatting)]
#![warn(clippy::suspicious_unary_op_formatting)]
#![warn(clippy::mut_mutex_lock)]
#![warn(clippy::print_literal)]
#![warn(clippy::same_item_push)]
#![warn(clippy::useless_format)]
#![warn(clippy::write_literal)]
#![warn(clippy::redundant_closure)]
#![warn(clippy::redundant_closure_call)]
#![warn(clippy::unnecessary_lazy_evaluations)]
#![warn(clippy::partialeq_ne_impl)]
#![warn(clippy::redundant_field_names)]
#![warn(clippy::transmutes_expressible_as_ptr_casts)]
#![warn(clippy::unused_async)]
#![warn(clippy::disallowed_methods)]
#![warn(clippy::disallowed_macros)]
#![warn(clippy::disallowed_types)]
#![warn(clippy::from_over_into)]
// END LINT CONFIG

use reqwest::{Method};
use serde::Deserialize;

use super::{environment::Environment, Client, CloudProvider, CloudProviderAndRegion, errors::CloudApiError};

#[derive(Debug, Deserialize, Clone)]
#[serde(rename_all = "camelCase")]
pub struct Region {
    pub environment_controller_url: String,
}

impl Client {
    //// Get a cloud provider's region's environment
    pub async fn region_environment_details(
        &self,
        region: &Region,
    ) -> Result<Option<Vec<Environment>>, CloudApiError> {
        let request = self.build_request(Method::GET, ["api","environment"]);
        let token = self.frontegg_client.auth().await.unwrap().token;
        let response = request.bearer_auth(token).send().await?;

        match response.content_length() {
            Some(length) => {
                if length > 0 {
                    Ok(Some(response.json::<Vec<Environment>>().await?))
                } else {
                    Ok(None)
                }
            }
            None => Ok(None),
        }
    }

    //// Get a cloud provider's regions
    pub async fn get_cloud_provider_region_details(
        &self,
        cloud_provider_region: &CloudProvider,
    ) -> Result<Vec<Region>, CloudApiError> {
        let request = self.build_request(Method::GET, ["api", "environmentassignment"]);
        let token = self.frontegg_client.auth().await.unwrap().token;
        let response = request.bearer_auth(token).send().await?;

        Ok(response.json().await.unwrap())
    }

    pub async fn list_cloud_regions(&self, cloud_providers: Vec<&CloudProvider>) -> Result<Vec<CloudProviderAndRegion>, CloudApiError> {
        // TODO: Run requests in parallel
        let mut cloud_providers_and_regions: Vec<CloudProviderAndRegion> = Vec::new();

        for cloud_provider in cloud_providers {
            let cloud_provider_region_details = self
                .get_cloud_provider_region_details(cloud_provider)
                .await?;
            match cloud_provider_region_details.get(0) {
                Some(region) => cloud_providers_and_regions.push(CloudProviderAndRegion {
                    cloud_provider: cloud_provider.clone(),
                    region: Some(region.to_owned()),
                }),
                None => cloud_providers_and_regions.push(CloudProviderAndRegion {
                    cloud_provider: cloud_provider.clone(),
                    region: None,
                }),
            }
        }

        Ok(cloud_providers_and_regions)
    }
}
